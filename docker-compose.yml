services:
    burndown:
        build: ./scripts/burndown
        volumes:
            - ${BURNDOWN_DATA:-./burndown}:/data
        environment:
            INPUT: /data/data.csv
            OUTPUT: /data/plot.svg
            GH_TOKEN: ${GH_TOKEN:-lol}

    appium:
        init: true
        image: docker.io/appium/appium
        privileged: true
        ports:
            - "4723:4723"
        environment:
            APPIUM_ADDITIONAL_PARAMS: --allow-insecure chromedriver_autodownload,adb_shell
        volumes:
            - ./mobile_app/build/app/outputs/flutter-apk:/apk:ro
            - /home/androidusr/.android

    emulator:
        init: true
        build: ./emulator
        ports:
            - "6080:6080"
            - "4723:4723"
            - "5555:5555" #for adb
            - "5554:5554" #for adb
        environment:
            EMULATOR_DEVICE: "Samsung Galaxy S10"
            WEB_VNC: true
            APPIUM: true
            APPIUM_ADDITIONAL_ARGS: --allow-insecure chromedriver_autodownload,adb_shell
        devices:
            - /dev/kvm
        volumes:
            - ./mobile_app/build/app/outputs/flutter-apk:/apk:ro
            - /home/androidusr
        depends_on:
            - backend

    build-apk:
        build: ./mobile_app
        volumes:
            - ./mobile_app/build/app/outputs/flutter-apk:/app/build/app/outputs/flutter-apk
            - /app/build
            - /root/.gradle
        environment:
            API_URL: ${API_URL:-http://10.0.2.2:5000}
            DRIVER: ${DRIVER:-false}

    acceptance-tests:
        build:
          context: ./
          dockerfile: ./test/Dockerfile
        environment:
            DB_URL: ${DB_URL:-postgres://postgres:password@postgres:5432/postgres}
            APPIUM_HOST: ${APPIUM_HOST:-emulator}
            APPIUM_PORT: ${APPIUM_PORT:-4723}
            APPIUM_DEVICE: ${APPIUM_DEVICE:-emulator-5554}
            APPIUM_APK: ${APPIUM_APK:-/apk/app-debug.apk}
            APPIUM_CHROMEDRIVER_PATH: ${APPIUM_CHROMEDRIVER_PATH:-disabled}

    # the .env should be created manually by each of you in backend/server_db/.env
    # command to run just postgres: docker-compose --env-file backend/server_db/.env up -d postgres
    production-database:
        image: postgres
        environment:
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
            POSTGRES_USER: ${POSTGRES_USER:-postgres}
            POSTGRES_DB: ${POSTGRES_DB:-postgres}
        volumes:
            - ./backend/server_db/sql_scripts/create_db.sql:/docker-entrypoint-initdb.d/create_db.sql:ro
            - postgres_data:/var/lib/postgresql/data
        ports:
            - "5432:5432"
        restart: unless-stopped

    postgres:
        image: postgres
        environment:
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
            POSTGRES_USER: ${POSTGRES_USER:-postgres}
            POSTGRES_DB: ${POSTGRES_DB:-postgres}
            PGDATA: /tmp/data
        tmpfs:
            - /tmp
            - /var/run
        volumes:
            - ./backend/server_db/sql_scripts/create_db.sql:/docker-entrypoint-initdb.d/create_db.sql:ro
        ports:
            - "5432:5432"
        read_only: true

    database-data:
        build:
          context: ./
          dockerfile: ./backend/server_db/test_data/Dockerfile
        environment:
            DB_URL: ${DB_URL:-postgres://postgres:password@postgres:5432/postgres}
        depends_on:
            - postgres

    duckdns:
      image: lscr.io/linuxserver/duckdns:latest
      environment:
        SUBDOMAINS: studybuds,unigelogin
        TOKEN: ${DUCKDNS_TOKEN:-changeme}
      restart: unless-stopped
      tmpfs:
        - /run:exec
      read_only: true

    # migration container
    migration:
        image: docker.io/migrate/migrate
        volumes:
            - ./backend/server_db/migrations:/migrations
        command: -database ${DB_URL:-postgres://postgres:password@postgres:5432/postgres?sslmode=disable} -path migrations up
        depends_on:
            - postgres

    backend:
        build: ./backend
        ports:
            - "5000:5000"
        environment:
            DB_URL: ${DB_URL:-postgres://postgres:password@postgres:5432/postgres}
            JWT_SECRET: ${JWT_SECRET:-changeme}
            IDP_METADATA: ${IDP_METADATA:-http://unigelogin:8080/simplesaml/saml2/idp/metadata.php}
            IDP_ENTRYPOINT: ${IDP_ENTRYPOINT:-http://10.0.2.2:8080/simplesaml/saml2/idp/SSOService.php}
            UNIGE_TOKEN: ${UNIGE_TOKEN:-eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJzdHVkeV9idWRzIn0.RuHH3N-8d0sxukvyVCuq59xnWf-vhkgPmnU30pv1Yo0}
            UNIGEAPI_URL: ${UNIGEAPI_URL:-http://unigeapi:8000}
            ENTITY_ID: saml-poc
            FB_PKEY: ${FB_PKEY:-test}
        depends_on:
            - unigeapi
            - unigelogin
        restart: unless-stopped
        read_only: true

    generate-schema:
        build:
          context: ./backend
          dockerfile: ./schema.dockerfile
        command: 
        volumes:
            - ./backend/src/models:/out
        environment:
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
            POSTGRES_USER: ${POSTGRES_USER:-postgres}
            POSTGRES_DB: ${POSTGRES_DB:-postgres}
            POSTGRES_HOST: postgres
            POSTGRES_PORT: 5432
            OUT: /out
        depends_on:
            - postgres
        read_only: true

    api-testing:
        build: ./backend/api_testing
        depends_on:
            - backend

    unigelogin:
        build:
            dockerfile: ./unigelogin.dockerfile
            context: ./unige
        environment:
            SIMPLESAMLPHP_SP_ENTITY_ID: saml-poc
            SIMPLESAMLPHP_SP_ASSERTION_CONSUMER_SERVICE: ${BACKEND_CALLBACK:-http://10.0.2.2:5000/login/}
            DATA: /data/data.json
        ports:
            - "8080:8080"
        tmpfs:
            - /var/lock
            - /var/run
        volumes:
            - unigedata:/data:ro
        depends_on:
            yaml:
                condition: service_completed_successfully
        restart: unless-stopped
        read_only: true

    yaml:
        build:
            dockerfile: ./yaml.dockerfile
            context: ./unige
        volumes:
            - ./unige:/in:ro
            - unigedata:/out
        environment:
            IN: /in/data.yml
            OUT: /out/data.json
        read_only: true

    # docker compose run --rm unigeapi python -m main
    # to get the authorization token
    unigeapi:
        build: unige
        ports:
            - "8000:8000"
        volumes:
            - ./unige:/data:ro
        tmpfs:
            - /tmp
        environment:
            SECRET_KEY: ${SECRET_KEY:-changeme}
            DATABASE: /data/data.yml
        restart: unless-stopped
        read_only: true

    caddy:
      image: docker.io/caddy
      ports:
        - "80:80"
        - "443:443"
      volumes:
        - ./Caddyfile:/etc/caddy/Caddyfile:ro
        - /data
      restart: unless-stopped
      read_only: true

volumes:
    unigedata:
    postgres_data:
    emulator-data:
