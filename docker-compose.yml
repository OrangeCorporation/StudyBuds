services:
    burndown:
        build: ./scripts/burndown
        volumes:
            - ${BURNDOWN_DATA:-./burndown}:/data
        environment:
            INPUT: /data/data.csv
            OUTPUT: /data/plot.svg
            GH_TOKEN: ${GH_TOKEN:-lol}

    emulator:
        build: ./emulator
        #image: docker.io/budtmo/docker-android:emulator_11.0
        ports:
            - "6080:6080"
            #- "5555:5555" for adb
            #- "5554:5554" for adb
        environment:
            EMULATOR_DEVICE: "Samsung Galaxy S10"
            WEB_VNC: true
            APPIUM: true
        devices:
            - /dev/kvm
        volumes:
            - apk:/apk:ro
            - emulator-data:/home/androidusr
        depends_on:
            - backend

    build-apk:
        build: ./mobile_app
        volumes:
            - apk:/app/build/app/outputs/flutter-apk
            - apk-build-cache:/app/build
    acceptance-tests:
        build: ./test
        environment:
            APPIUM_OS: android
            APK: /apk/app-debug.apk
            DEVICE: ""
            APPIUM_HOST: "emulator"
            APPIUM_PORT: "4723"

    # the .env should be created manually by each of you in backend/server_db/.env
    # command to run just postgres: docker-compose --env-file backend/server_db/.env up -d postgres
    postgres:
        image: postgres
        environment:
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
            POSTGRES_USER: ${POSTGRES_USER:-postgres}
            POSTGRES_DB: ${POSTGRES_DB:-postgres}
        volumes:
            - ./backend/server_db/sql_scripts:/docker-entrypoint-initdb.d
            - postgres_data:/var/lib/postgresql/data
            - ./backend/server_db/migrations:/migrations
        ports:
            - "5432:5432"
    backend:
        build: ./backend
        ports:
            - "5000:5000"
        environment:
            DB_URL: ${DB_URL:-postgres://postgres:password@postgres:5432/postgres}
            JWT_SECRET: ${JWT_SECRET:-changeme}
            IDP_METADATA: ${IDP_METADATA:-http://unigelogin:8080/simplesaml/saml2/idp/metadata.php}
            IDP_ENTRYPOINT: ${IDP_ENTRYPOINT:-http://127.0.0.1:8080/simplesaml/saml2/idp/SSOService.php}
            UNIGE_TOKEN: ${UNIGE_TOKEN:-eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJzdHVkeV9idWRzIn0.RuHH3N-8d0sxukvyVCuq59xnWf-vhkgPmnU30pv1Yo0}
            UNIGEAPI_URL: ${UNIGEAPI_URL:-http://unigeapi:8000}
            ENTITY_ID: saml-poc
            MOCK_DATA: "true"
        depends_on:
            - postgres
            - unigelogin
            - unigeapi

    unigelogin:
        build:
            dockerfile: ./unigelogin.dockerfile
            context: ./unige
        environment:
            SIMPLESAMLPHP_SP_ENTITY_ID: saml-poc
            SIMPLESAMLPHP_SP_ASSERTION_CONSUMER_SERVICE: ${BACKEND_CALLBACK:-http://127.0.0.1:5000/login/}
            DATA: /data/data.json
        ports:
            - "8080:8080"
        volumes:
            - unigedata:/data:ro
        depends_on:
            yaml:
                condition: service_completed_successfully

    yaml:
        build:
            dockerfile: ./yaml.dockerfile
            context: ./unige
        volumes:
            - ./unige:/in:ro
            - unigedata:/out
        environment:
            IN: /in/data.yml
            OUT: /out/data.json

    # docker compose run --rm unigeapi python -m main
    # to get the authorization token
    unigeapi:
        build: unige
        ports:
            - "8000:8000"
        volumes:
            - ./unige:/data:ro
        environment:
            SECRET_KEY: ${SECRET_KEY:-changeme}
            DATABASE: /data/data.yml

volumes:
    apk:
    unigedata:
    apk-build-cache:
    postgres_data:
    emulator-data:
